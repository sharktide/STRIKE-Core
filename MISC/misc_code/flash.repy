import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.saving import register_keras_serializable
from tensorflow.keras import layers, models, backend as K
import joblib

@register_keras_serializable()
def intensity_slope_amplifier(inputs):
    rainfall_intensity = inputs[:, 0]
    slope = inputs[:, 1]
    runoff_boost = tf.sigmoid((rainfall_intensity - 75) * 0.08)
    slope_boost = tf.sigmoid((slope - 10) * 0.05)
    return (1.0 + 0.35 * runoff_boost * slope_boost)[:, None]

@register_keras_serializable()
def drainage_penalty(inputs):
    drainage = inputs[:, 2]
    return (1.0 - 0.4 * tf.sigmoid((drainage - 3.5) * 2))[:, None]

@register_keras_serializable()
def convergence_suppressor(inputs):
    convergence = inputs[:, 4]
    return (1.0 + 0.3 * tf.sigmoid((convergence - 0.5) * 8))[:, None]

@register_keras_serializable()
def clip_modulation(x):
    return tf.clip_by_value(x, 0.7, 1.3)

@register_keras_serializable()
def trust_activation(x):
    return 0.5 + tf.sigmoid(x)

flood_model = load_model("models/FlashFloodNet.h5", custom_objects={
    'clip_modulation': clip_modulation,
    'convergence_suppressor': convergence_suppressor,
    'drainage_penalty': drainage_penalty,
    'intensity_slope_amplifier': intensity_slope_amplifier
})
trust_model = load_model("models/FlashFloodTrustNet.h5", custom_objects={
    'mse': tf.keras.losses.MeanSquaredError(),
    'trust_activation': trust_activation
})
scaler = joblib.load("models/flashFloodTrustScaler.pkl")

scenarios = [
    {
        "label": "High Rain + High Drainage Escape",
        "features": [115, 18, 4.8, 0.85, 0.7],
        "expected": "No Flood"
    },
    {
        "label": "Urban Saturated Trap",
        "features": [70, 10, 2.0, 0.95, 0.75],
        "expected": "Flood"
    },
    {
        "label": "Rural Slope Surprise",
        "features": [88, 21, 3.8, 0.6, 0.6],
        "expected": "Possibly Flood"
    },
    {
        "label": "Dry Valley with Low Drainage",
        "features": [60, 13, 1.8, 0.3, 0.9],
        "expected": "No Flood"
    },
    {
        "label": "Saturated Basin with Moderate Drainage",
        "features": [90, 12, 3.0, 1.0, 0.85],
        "expected": "Flood"
    },
    {
        "label": "Balanced Threat Mix",
        "features": [78, 15, 3.3, 0.7, 0.65],
        "expected": "Possibly Flood"
    },
    {
        "label": "Rogue Storm in Low Convergence Flat",
        "features": [100, 6, 2.7, 0.8, 0.25],
        "expected": "Possibly Flood"
    }
]

# --- Decision Logic ---
def classify_flood(pred, trust_score):
    if pred < 0.4:
        return "No Flood"
    elif 0.4 <= pred <= 0.55:
        if trust_score > 1.0:
            return "Flood"
        elif trust_score < 0.7:
            return "No Flood"
        else:
            return "Possible Flood"
    else:
        return "Flood"

# --- Run Evaluation ---
print("\nFlashFloodNet + TrustNet Evaluation:\n")

<OPTIMIZE gct=True, profile=True, parallel=True>
for case in scenarios:
    raw = np.array(case["features"], dtype="float32").reshape(1, -1)
    scaled = scaler.transform(raw)
    
    flood_pred = flood_model(raw).numpy()[0][0]
    trust_score = trust_model(scaled).numpy()[0][0]
    verdict = classify_flood(flood_pred, trust_score)
    
    print(f"{case['label']}")
    print(f"  > Features: {case['features']}")
    print(f"  > FlashFloodNet: {flood_pred:.2f}")
    print(f"  > Trust Score   : {trust_score:.2f}")
    print(f"  > Final Verdict : {verdict}")
    print(f"  > Expected      : {case['expected']}\n")