import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.saving import register_keras_serializable

@register_keras_serializable()
def surface_runoff_amplifier(inputs):
    rain = inputs[:, 0]
    impervious = inputs[:, 1]
    return (1.0 + 0.5 * tf.sigmoid((rain - 30) * 0.1) * tf.sigmoid((impervious - 0.6) * 10))[:, None]

@register_keras_serializable()
def drainage_penalty(inputs):
    dd = inputs[:, 2]
    return (1.0 - 0.4 * tf.sigmoid((dd - 3.5) * 2))[:, None]

@register_keras_serializable()
def convergence_suppressor(inputs):
    ci = inputs[:, 4]
    return (1.0 + 0.3 * tf.sigmoid((ci - 0.5) * 8))[:, None]

@register_keras_serializable()
def clip_modulation(x):
    return tf.clip_by_value(x, 0.7, 1.3)

# --- Load Trustless Model ---
model = tf.keras.models.load_model("models/PL-PluvialNet-4.h5", custom_objects={
    "clip_modulation": clip_modulation,
    'surface_runoff_amplifier': surface_runoff_amplifier,
    'drainage_penalty': drainage_penalty,
    'convergence_suppressor': convergence_suppressor
})

import tensorflow as tf
import pandas as pd
import numpy as np

# --- Load your trustless model ---

# --- Choose a test input where flood risk should be ambiguous ---
test_sample = {
    "rainfall_intensity": 50.0,      # sweepable target feature
    "impervious_ratio": 0.6,
    "drainage_density": 2.5,
    "urbanization_index": 0.7,
    "convergence_index": 0.65
}

# --- Convert to DataFrame and Tensor ---
input_df = pd.DataFrame([test_sample])
input_tensor = tf.convert_to_tensor(input_df.values, dtype=tf.float32)

# --- Use GradientTape to track rainfall influence ---
with tf.GradientTape() as tape:
    tape.watch(input_tensor)
    prediction = model(input_tensor)
    
# --- Compute gradient of output w.r.t. rainfall_intensity (index 0) ---
gradient = tape.gradient(prediction, input_tensor).numpy()[0, 0]  # rainfall = column 0

# --- Display result ---
print(f"Rainfall Gradient: {gradient:.6f}")
if abs(gradient) < 1e-3:
    print("Gradient is vanishing  rainfall has minimal influence on output.")
elif abs(gradient) < 1e-2:
    print("Weak gradient  rainfall is barely contributing.")
else:
    print("Gradient is alive  rainfall is impacting predictions.")

rain_vals = np.linspace(0, 100, 25)
urban_vals = np.linspace(0.0, 1.0, 25)

fixed_inputs = {
    "impervious_ratio": 0.6,
    "drainage_density": 2.5,
    "convergence_index": 0.65
}

sweep_inputs = []

for rain in rain_vals:
    for urban in urban_vals:
        sample = {
            "rainfall_intensity": rain,
            "impervious_ratio": fixed_inputs["impervious_ratio"],
            "drainage_density": fixed_inputs["drainage_density"],
            "urbanization_index": urban,
            "convergence_index": fixed_inputs["convergence_index"]
        }
        sweep_inputs.append(sample)

sweep_df = pd.DataFrame(sweep_inputs)
sweep_preds = model.predict(sweep_df).flatten()


Z = sweep_preds.reshape(len(rain_vals), len(urban_vals))
X, Y = np.meshgrid(rain_vals, urban_vals)

fig = plt.figure(figsize=(10, 6))
ax = fig.add_subplot(111, projection="3d")
ax.plot_surface(X, Y, Z.T, cmap="viridis", edgecolor="k", linewidth=0.3)
ax.set_xlabel("Rainfall Intensity (mm/hr)")
ax.set_ylabel("Urbanization Index")
ax.set_zlabel("Flood Probability")
plt.title("ðŸŒŠ PluvialNet Prediction Surface")
plt.tight_layout()
plt.show()

test_cases = pd.DataFrame([
    {
        "rainfall_intensity": 15,  # Dry urban zone
        "impervious_ratio": 0.82,
        "drainage_density": 3.8,
        "urbanization_index": 0.85,
        "convergence_index": 0.6
    },
    {
        "rainfall_intensity": 90,  # Rural flood driven by rain
        "impervious_ratio": 0.3,
        "drainage_density": 2.5,
        "urbanization_index": 0.35,
        "convergence_index": 0.85
    },
    {
        "rainfall_intensity": 55,  # Ambiguous urban flood
        "impervious_ratio": 0.65,
        "drainage_density": 2.3,
        "urbanization_index": 0.78,
        "convergence_index": 0.7
    },
    {
        "rainfall_intensity": 40,  # Low-rain, mid-urban, good drainage
        "impervious_ratio": 0.5,
        "drainage_density": 4.0,
        "urbanization_index": 0.6,
        "convergence_index": 0.55
    },
    {
        "rainfall_intensity": 100, # High rain, but resilient zone
        "impervious_ratio": 0.2,
        "drainage_density": 4.8,
        "urbanization_index": 0.25,
        "convergence_index": 0.3
    }
])

# Predict
predictions = model.predict(test_cases).flatten()

for i, pred in enumerate(predictions):
    print(f"ðŸ§¾ Test Case {i+1}: Flood Probability = {pred:.3f}")
